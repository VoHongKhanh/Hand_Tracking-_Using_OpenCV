# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'untitled.ui'
#
# Created by: PyQt5 UI code generator 5.15.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
import math

from PyQt5 import QtCore , QtGui , QtWidgets
from PyQt5.QtWidgets import QLineEdit , QComboBox


class Ui_MainWindow ( object ):
    def setupUi(self , MainWindow):
        MainWindow.setObjectName ( "MainWindow" )
        MainWindow.resize ( 579 , 540 )
        self.centralwidget = QtWidgets.QWidget ( MainWindow )
        self.centralwidget.setObjectName ( "centralwidget" )
        self.pushButton = QtWidgets.QPushButton ( self.centralwidget )
        self.pushButton.setGeometry ( QtCore.QRect ( 410 , 50 , 121 , 91 ) )
        font = QtGui.QFont ()
        font.setFamily ( "Arial Black" )
        font.setPointSize ( 13 )
        font.setBold ( False )
        font.setWeight ( 50 )
        self.pushButton.setFont ( font )
        self.pushButton.setAutoFillBackground ( True )
        self.pushButton.setObjectName ( "pushButton" )
        self.pushButton_2 = QtWidgets.QPushButton ( self.centralwidget )
        self.pushButton_2.setGeometry ( QtCore.QRect ( 410 , 150 , 121 , 91 ) )
        font = QtGui.QFont ()
        font.setFamily ( "Arial Black" )
        font.setPointSize ( 13 )
        font.setBold ( False )
        font.setWeight ( 50 )
        self.pushButton_2.setFont ( font )
        self.pushButton_2.setObjectName ( "pushButton_2" )
        self.comboBox_1 = QtWidgets.QComboBox ( self.centralwidget )
        self.comboBox_1.setGeometry ( QtCore.QRect ( 20 , 50 , 171 , 41 ) )
        sizePolicy = QtWidgets.QSizePolicy ( QtWidgets.QSizePolicy.Preferred , QtWidgets.QSizePolicy.Fixed )
        sizePolicy.setHorizontalStretch ( 1 )
        sizePolicy.setVerticalStretch ( 0 )
        sizePolicy.setHeightForWidth ( self.comboBox_1.sizePolicy ().hasHeightForWidth () )
        self.comboBox_1.setSizePolicy ( sizePolicy )
        font = QtGui.QFont ()
        font.setPointSize ( 10 )
        font.setBold ( True )
        font.setWeight ( 75 )
        self.comboBox_1.setFont ( font )
        self.comboBox_1.setObjectName ( "comboBox_1" )
        self.comboBox_1.addItem ( "" )
        self.comboBox_1.addItem ( "" )
        self.comboBox_1.addItem ( "" )
        self.comboBox_1.addItem ( "" )
        self.comboBox_1.addItem ( "" )
        self.comboBox_1.addItem ( "" )
        self.comboBox_1.addItem ( "" )
        self.comboBox_1.addItem ( "" )
        self.comboBox_1.addItem ( "" )
        self.comboBox_1.addItem ( "" )
        self.comboBox_1.addItem ( "" )
        self.lineEdit_1 = QtWidgets.QLineEdit ( self.centralwidget )
        self.lineEdit_1.setGeometry ( QtCore.QRect ( 200 , 50 , 171 , 41 ) )
        sizePolicy = QtWidgets.QSizePolicy ( QtWidgets.QSizePolicy.Expanding , QtWidgets.QSizePolicy.Fixed )
        sizePolicy.setHorizontalStretch ( 1 )
        sizePolicy.setVerticalStretch ( 0 )
        sizePolicy.setHeightForWidth ( self.lineEdit_1.sizePolicy ().hasHeightForWidth () )
        self.lineEdit_1.setSizePolicy ( sizePolicy )
        font = QtGui.QFont ()
        font.setPointSize ( 10 )
        self.lineEdit_1.setFont ( font )
        self.lineEdit_1.setAutoFillBackground ( False )
        self.lineEdit_1.setText ( "" )
        self.lineEdit_1.setFrame ( True )
        self.lineEdit_1.setClearButtonEnabled ( True )
        self.lineEdit_1.setObjectName ( "lineEdit_1" )
        self.label = QtWidgets.QLabel ( self.centralwidget )
        self.label.setGeometry ( QtCore.QRect ( 20 , 20 , 191 , 16 ) )
        font = QtGui.QFont ()
        font.setPointSize ( 12 )
        font.setUnderline ( True )
        self.label.setFont ( font )
        self.label.setObjectName ( "label" )
        self.comboBox_2 = QtWidgets.QComboBox ( self.centralwidget )
        self.comboBox_2.setGeometry ( QtCore.QRect ( 20 , 100 , 171 , 41 ) )
        sizePolicy = QtWidgets.QSizePolicy ( QtWidgets.QSizePolicy.Preferred , QtWidgets.QSizePolicy.Fixed )
        sizePolicy.setHorizontalStretch ( 1 )
        sizePolicy.setVerticalStretch ( 0 )
        sizePolicy.setHeightForWidth ( self.comboBox_2.sizePolicy ().hasHeightForWidth () )
        self.comboBox_2.setSizePolicy ( sizePolicy )
        font = QtGui.QFont ()
        font.setPointSize ( 10 )
        font.setBold ( True )
        font.setWeight ( 75 )
        self.comboBox_2.setFont ( font )
        self.comboBox_2.setObjectName ( "comboBox_2" )
        self.comboBox_2.addItem ( "" )
        self.comboBox_2.addItem ( "" )
        self.comboBox_2.addItem ( "" )
        self.comboBox_2.addItem ( "" )
        self.comboBox_2.addItem ( "" )
        self.comboBox_2.addItem ( "" )
        self.comboBox_2.addItem ( "" )
        self.comboBox_2.addItem ( "" )
        self.comboBox_2.addItem ( "" )
        self.comboBox_2.addItem ( "" )
        self.comboBox_2.addItem ( "" )
        self.lineEdit_2 = QtWidgets.QLineEdit ( self.centralwidget )
        self.lineEdit_2.setGeometry ( QtCore.QRect ( 200 , 100 , 171 , 41 ) )
        sizePolicy = QtWidgets.QSizePolicy ( QtWidgets.QSizePolicy.Expanding , QtWidgets.QSizePolicy.Fixed )
        sizePolicy.setHorizontalStretch ( 1 )
        sizePolicy.setVerticalStretch ( 0 )
        sizePolicy.setHeightForWidth ( self.lineEdit_2.sizePolicy ().hasHeightForWidth () )
        self.lineEdit_2.setSizePolicy ( sizePolicy )
        font = QtGui.QFont ()
        font.setPointSize ( 10 )
        self.lineEdit_2.setFont ( font )
        self.lineEdit_2.setAutoFillBackground ( False )
        self.lineEdit_2.setText ( "" )
        self.lineEdit_2.setFrame ( True )
        self.lineEdit_2.setClearButtonEnabled ( True )
        self.lineEdit_2.setObjectName ( "lineEdit_2" )
        self.comboBox_3 = QtWidgets.QComboBox ( self.centralwidget )
        self.comboBox_3.setGeometry ( QtCore.QRect ( 20 , 150 , 171 , 41 ) )
        sizePolicy = QtWidgets.QSizePolicy ( QtWidgets.QSizePolicy.Preferred , QtWidgets.QSizePolicy.Fixed )
        sizePolicy.setHorizontalStretch ( 1 )
        sizePolicy.setVerticalStretch ( 0 )
        sizePolicy.setHeightForWidth ( self.comboBox_3.sizePolicy ().hasHeightForWidth () )
        self.comboBox_3.setSizePolicy ( sizePolicy )
        font = QtGui.QFont ()
        font.setPointSize ( 10 )
        font.setBold ( True )
        font.setWeight ( 75 )
        self.comboBox_3.setFont ( font )
        self.comboBox_3.setObjectName ( "comboBox_3" )
        self.comboBox_3.addItem ( "" )
        self.comboBox_3.addItem ( "" )
        self.comboBox_3.addItem ( "" )
        self.comboBox_3.addItem ( "" )
        self.comboBox_3.addItem ( "" )
        self.comboBox_3.addItem ( "" )
        self.comboBox_3.addItem ( "" )
        self.comboBox_3.addItem ( "" )
        self.comboBox_3.addItem ( "" )
        self.lineEdit_3 = QtWidgets.QLineEdit ( self.centralwidget )
        self.lineEdit_3.setGeometry ( QtCore.QRect ( 200 , 150 , 171 , 41 ) )
        sizePolicy = QtWidgets.QSizePolicy ( QtWidgets.QSizePolicy.Expanding , QtWidgets.QSizePolicy.Fixed )
        sizePolicy.setHorizontalStretch ( 1 )
        sizePolicy.setVerticalStretch ( 0 )
        sizePolicy.setHeightForWidth ( self.lineEdit_3.sizePolicy ().hasHeightForWidth () )
        self.lineEdit_3.setSizePolicy ( sizePolicy )
        font = QtGui.QFont ()
        font.setPointSize ( 10 )
        self.lineEdit_3.setFont ( font )
        self.lineEdit_3.setAutoFillBackground ( False )
        self.lineEdit_3.setText ( "" )
        self.lineEdit_3.setFrame ( True )
        self.lineEdit_3.setClearButtonEnabled ( True )
        self.lineEdit_3.setObjectName ( "lineEdit_3" )
        self.comboBox_4 = QtWidgets.QComboBox ( self.centralwidget )
        self.comboBox_4.setGeometry ( QtCore.QRect ( 20 , 200 , 171 , 41 ) )
        sizePolicy = QtWidgets.QSizePolicy ( QtWidgets.QSizePolicy.Preferred , QtWidgets.QSizePolicy.Fixed )
        sizePolicy.setHorizontalStretch ( 1 )
        sizePolicy.setVerticalStretch ( 0 )
        sizePolicy.setHeightForWidth ( self.comboBox_4.sizePolicy ().hasHeightForWidth () )
        self.comboBox_4.setSizePolicy ( sizePolicy )
        font = QtGui.QFont ()
        font.setPointSize ( 10 )
        font.setBold ( True )
        font.setWeight ( 75 )
        self.comboBox_4.setFont ( font )
        self.comboBox_4.setObjectName ( "comboBox_4" )
        self.comboBox_4.addItem ( "" )
        self.comboBox_4.addItem ( "" )
        self.comboBox_4.addItem ( "" )
        self.comboBox_4.addItem ( "" )
        self.comboBox_4.addItem ( "" )
        self.comboBox_4.addItem ( "" )
        self.comboBox_4.addItem ( "" )
        self.comboBox_4.addItem ( "" )
        self.comboBox_4.addItem ( "" )
        self.lineEdit_4 = QtWidgets.QLineEdit ( self.centralwidget )
        self.lineEdit_4.setGeometry ( QtCore.QRect ( 200 , 200 , 171 , 41 ) )
        sizePolicy = QtWidgets.QSizePolicy ( QtWidgets.QSizePolicy.Expanding , QtWidgets.QSizePolicy.Fixed )
        sizePolicy.setHorizontalStretch ( 1 )
        sizePolicy.setVerticalStretch ( 0 )
        sizePolicy.setHeightForWidth ( self.lineEdit_4.sizePolicy ().hasHeightForWidth () )
        self.lineEdit_4.setSizePolicy ( sizePolicy )
        font = QtGui.QFont ()
        font.setPointSize ( 10 )
        self.lineEdit_4.setFont ( font )
        self.lineEdit_4.setAutoFillBackground ( False )
        self.lineEdit_4.setText ( "" )
        self.lineEdit_4.setFrame ( True )
        self.lineEdit_4.setClearButtonEnabled ( True )
        self.lineEdit_4.setObjectName ( "lineEdit_4" )
        self.comboBox_5 = QtWidgets.QComboBox ( self.centralwidget )
        self.comboBox_5.setGeometry ( QtCore.QRect ( 20 , 320 , 171 , 41 ) )
        sizePolicy = QtWidgets.QSizePolicy ( QtWidgets.QSizePolicy.Preferred , QtWidgets.QSizePolicy.Fixed )
        sizePolicy.setHorizontalStretch ( 1 )
        sizePolicy.setVerticalStretch ( 0 )
        sizePolicy.setHeightForWidth ( self.comboBox_5.sizePolicy ().hasHeightForWidth () )
        self.comboBox_5.setSizePolicy ( sizePolicy )
        font = QtGui.QFont ()
        font.setPointSize ( 10 )
        font.setBold ( True )
        font.setWeight ( 75 )
        self.comboBox_5.setFont ( font )
        self.comboBox_5.setObjectName ( "comboBox_5" )
        self.comboBox_5.addItem ( "" )
        self.comboBox_5.addItem ( "" )
        self.comboBox_5.addItem ( "" )
        self.comboBox_5.addItem ( "" )
        self.comboBox_5.addItem ( "" )
        self.comboBox_5.addItem ( "" )
        self.comboBox_5.addItem ( "" )
        self.comboBox_5.addItem ( "" )
        self.comboBox_5.addItem ( "" )
        self.lineEdit_5 = QtWidgets.QLineEdit ( self.centralwidget )
        self.lineEdit_5.setGeometry ( QtCore.QRect ( 380 , 320 , 171 , 41 ) )
        sizePolicy = QtWidgets.QSizePolicy ( QtWidgets.QSizePolicy.Expanding , QtWidgets.QSizePolicy.Fixed )
        sizePolicy.setHorizontalStretch ( 1 )
        sizePolicy.setVerticalStretch ( 0 )
        sizePolicy.setHeightForWidth ( self.lineEdit_5.sizePolicy ().hasHeightForWidth () )
        self.lineEdit_5.setSizePolicy ( sizePolicy )
        font = QtGui.QFont ()
        font.setPointSize ( 10 )
        self.lineEdit_5.setFont ( font )
        self.lineEdit_5.setAutoFillBackground ( False )
        self.lineEdit_5.setText ( "" )
        self.lineEdit_5.setFrame ( True )
        self.lineEdit_5.setClearButtonEnabled ( True )
        self.lineEdit_5.setObjectName ( "lineEdit_5" )
        self.label_2 = QtWidgets.QLabel ( self.centralwidget )
        self.label_2.setGeometry ( QtCore.QRect ( 20 , 280 , 361 , 31 ) )
        font = QtGui.QFont ()
        font.setPointSize ( 12 )
        font.setUnderline ( False )
        self.label_2.setFont ( font )
        self.label_2.setObjectName ( "label_2" )
        self.comboBox_6 = QtWidgets.QComboBox ( self.centralwidget )
        self.comboBox_6.setGeometry ( QtCore.QRect ( 200 , 320 , 171 , 41 ) )
        sizePolicy = QtWidgets.QSizePolicy ( QtWidgets.QSizePolicy.Preferred , QtWidgets.QSizePolicy.Fixed )
        sizePolicy.setHorizontalStretch ( 1 )
        sizePolicy.setVerticalStretch ( 0 )
        sizePolicy.setHeightForWidth ( self.comboBox_6.sizePolicy ().hasHeightForWidth () )
        self.comboBox_6.setSizePolicy ( sizePolicy )
        font = QtGui.QFont ()
        font.setPointSize ( 10 )
        font.setBold ( True )
        font.setWeight ( 75 )
        self.comboBox_6.setFont ( font )
        self.comboBox_6.setObjectName ( "comboBox_6" )
        self.comboBox_6.addItem ( "" )
        self.comboBox_6.addItem ( "" )
        self.comboBox_6.addItem ( "" )
        self.comboBox_6.addItem ( "" )
        self.comboBox_6.addItem ( "" )
        self.lineEdit_7 = QtWidgets.QLineEdit ( self.centralwidget )
        self.lineEdit_7.setGeometry ( QtCore.QRect ( 380 , 370 , 171 , 41 ) )
        sizePolicy = QtWidgets.QSizePolicy ( QtWidgets.QSizePolicy.Expanding , QtWidgets.QSizePolicy.Fixed )
        sizePolicy.setHorizontalStretch ( 1 )
        sizePolicy.setVerticalStretch ( 0 )
        sizePolicy.setHeightForWidth ( self.lineEdit_7.sizePolicy ().hasHeightForWidth () )
        self.lineEdit_7.setSizePolicy ( sizePolicy )
        font = QtGui.QFont ()
        font.setPointSize ( 10 )
        self.lineEdit_7.setFont ( font )
        self.lineEdit_7.setAutoFillBackground ( False )
        self.lineEdit_7.setText ( "" )
        self.lineEdit_7.setFrame ( True )
        self.lineEdit_7.setClearButtonEnabled ( True )
        self.lineEdit_7.setObjectName ( "lineEdit_7" )
        self.comboBox_10 = QtWidgets.QComboBox ( self.centralwidget )
        self.comboBox_10.setGeometry ( QtCore.QRect ( 200 , 420 , 171 , 41 ) )
        sizePolicy = QtWidgets.QSizePolicy ( QtWidgets.QSizePolicy.Preferred , QtWidgets.QSizePolicy.Fixed )
        sizePolicy.setHorizontalStretch ( 1 )
        sizePolicy.setVerticalStretch ( 0 )
        sizePolicy.setHeightForWidth ( self.comboBox_10.sizePolicy ().hasHeightForWidth () )
        self.comboBox_10.setSizePolicy ( sizePolicy )
        font = QtGui.QFont ()
        font.setPointSize ( 10 )
        font.setBold ( True )
        font.setWeight ( 75 )
        self.comboBox_10.setFont ( font )
        self.comboBox_10.setObjectName ( "comboBox_10" )
        self.comboBox_10.addItem ( "" )
        self.comboBox_10.addItem ( "" )
        self.comboBox_10.addItem ( "" )
        self.comboBox_10.addItem ( "" )
        self.comboBox_10.addItem ( "" )
        self.comboBox_9 = QtWidgets.QComboBox ( self.centralwidget )
        self.comboBox_9.setGeometry ( QtCore.QRect ( 20 , 420 , 171 , 41 ) )
        sizePolicy = QtWidgets.QSizePolicy ( QtWidgets.QSizePolicy.Preferred , QtWidgets.QSizePolicy.Fixed )
        sizePolicy.setHorizontalStretch ( 1 )
        sizePolicy.setVerticalStretch ( 0 )
        sizePolicy.setHeightForWidth ( self.comboBox_9.sizePolicy ().hasHeightForWidth () )
        self.comboBox_9.setSizePolicy ( sizePolicy )
        font = QtGui.QFont ()
        font.setPointSize ( 10 )
        font.setBold ( True )
        font.setWeight ( 75 )
        self.comboBox_9.setFont ( font )
        self.comboBox_9.setObjectName ( "comboBox_9" )
        self.comboBox_9.addItem ( "" )
        self.comboBox_9.addItem ( "" )
        self.comboBox_9.addItem ( "" )
        self.comboBox_9.addItem ( "" )
        self.comboBox_9.addItem ( "" )
        self.comboBox_9.addItem ( "" )
        self.comboBox_9.addItem ( "" )
        self.comboBox_9.addItem ( "" )
        self.comboBox_9.addItem ( "" )
        self.comboBox_7 = QtWidgets.QComboBox ( self.centralwidget )
        self.comboBox_7.setGeometry ( QtCore.QRect ( 20 , 370 , 171 , 41 ) )
        sizePolicy = QtWidgets.QSizePolicy ( QtWidgets.QSizePolicy.Preferred , QtWidgets.QSizePolicy.Fixed )
        sizePolicy.setHorizontalStretch ( 1 )
        sizePolicy.setVerticalStretch ( 0 )
        sizePolicy.setHeightForWidth ( self.comboBox_7.sizePolicy ().hasHeightForWidth () )
        self.comboBox_7.setSizePolicy ( sizePolicy )
        font = QtGui.QFont ()
        font.setPointSize ( 10 )
        font.setBold ( True )
        font.setWeight ( 75 )
        self.comboBox_7.setFont ( font )
        self.comboBox_7.setObjectName ( "comboBox_7" )
        self.comboBox_7.addItem ( "" )
        self.comboBox_7.addItem ( "" )
        self.comboBox_7.addItem ( "" )
        self.comboBox_7.addItem ( "" )
        self.comboBox_7.addItem ( "" )
        self.comboBox_7.addItem ( "" )
        self.comboBox_7.addItem ( "" )
        self.comboBox_7.addItem ( "" )
        self.comboBox_7.addItem ( "" )
        self.comboBox_8 = QtWidgets.QComboBox ( self.centralwidget )
        self.comboBox_8.setGeometry ( QtCore.QRect ( 200 , 370 , 171 , 41 ) )
        sizePolicy = QtWidgets.QSizePolicy ( QtWidgets.QSizePolicy.Preferred , QtWidgets.QSizePolicy.Fixed )
        sizePolicy.setHorizontalStretch ( 1 )
        sizePolicy.setVerticalStretch ( 0 )
        sizePolicy.setHeightForWidth ( self.comboBox_8.sizePolicy ().hasHeightForWidth () )
        self.comboBox_8.setSizePolicy ( sizePolicy )
        font = QtGui.QFont ()
        font.setPointSize ( 10 )
        font.setBold ( True )
        font.setWeight ( 75 )
        self.comboBox_8.setFont ( font )
        self.comboBox_8.setObjectName ( "comboBox_8" )
        self.comboBox_8.addItem ( "" )
        self.comboBox_8.addItem ( "" )
        self.comboBox_8.addItem ( "" )
        self.comboBox_8.addItem ( "" )
        self.comboBox_8.addItem ( "" )
        self.comboBox_12 = QtWidgets.QComboBox ( self.centralwidget )
        self.comboBox_12.setGeometry ( QtCore.QRect ( 200 , 470 , 171 , 41 ) )
        sizePolicy = QtWidgets.QSizePolicy ( QtWidgets.QSizePolicy.Preferred , QtWidgets.QSizePolicy.Fixed )
        sizePolicy.setHorizontalStretch ( 1 )
        sizePolicy.setVerticalStretch ( 0 )
        sizePolicy.setHeightForWidth ( self.comboBox_12.sizePolicy ().hasHeightForWidth () )
        self.comboBox_12.setSizePolicy ( sizePolicy )
        font = QtGui.QFont ()
        font.setPointSize ( 10 )
        font.setBold ( True )
        font.setWeight ( 75 )
        self.comboBox_12.setFont ( font )
        self.comboBox_12.setObjectName ( "comboBox_12" )
        self.comboBox_12.addItem ( "" )
        self.comboBox_12.addItem ( "" )
        self.comboBox_12.addItem ( "" )
        self.comboBox_12.addItem ( "" )
        self.comboBox_12.addItem ( "" )
        self.comboBox_11 = QtWidgets.QComboBox ( self.centralwidget )
        self.comboBox_11.setGeometry ( QtCore.QRect ( 20 , 470 , 171 , 41 ) )
        sizePolicy = QtWidgets.QSizePolicy ( QtWidgets.QSizePolicy.Preferred , QtWidgets.QSizePolicy.Fixed )
        sizePolicy.setHorizontalStretch ( 1 )
        sizePolicy.setVerticalStretch ( 0 )
        sizePolicy.setHeightForWidth ( self.comboBox_11.sizePolicy ().hasHeightForWidth () )
        self.comboBox_11.setSizePolicy ( sizePolicy )
        font = QtGui.QFont ()
        font.setPointSize ( 10 )
        font.setBold ( True )
        font.setWeight ( 75 )
        self.comboBox_11.setFont ( font )
        self.comboBox_11.setObjectName ( "comboBox_11" )
        self.comboBox_11.addItem ( "" )
        self.comboBox_11.addItem ( "" )
        self.comboBox_11.addItem ( "" )
        self.comboBox_11.addItem ( "" )
        self.comboBox_11.addItem ( "" )
        self.comboBox_11.addItem ( "" )
        self.comboBox_11.addItem ( "" )
        self.comboBox_11.addItem ( "" )
        self.comboBox_11.addItem ( "" )
        self.lineEdit_9 = QtWidgets.QLineEdit ( self.centralwidget )
        self.lineEdit_9.setGeometry ( QtCore.QRect ( 380 , 420 , 171 , 41 ) )
        sizePolicy = QtWidgets.QSizePolicy ( QtWidgets.QSizePolicy.Expanding , QtWidgets.QSizePolicy.Fixed )
        sizePolicy.setHorizontalStretch ( 1 )
        sizePolicy.setVerticalStretch ( 0 )
        sizePolicy.setHeightForWidth ( self.lineEdit_9.sizePolicy ().hasHeightForWidth () )
        self.lineEdit_9.setSizePolicy ( sizePolicy )
        font = QtGui.QFont ()
        font.setPointSize ( 10 )
        self.lineEdit_9.setFont ( font )
        self.lineEdit_9.setAutoFillBackground ( False )
        self.lineEdit_9.setText ( "" )
        self.lineEdit_9.setFrame ( True )
        self.lineEdit_9.setClearButtonEnabled ( True )
        self.lineEdit_9.setObjectName ( "lineEdit_9" )
        self.lineEdit_11 = QtWidgets.QLineEdit ( self.centralwidget )
        self.lineEdit_11.setGeometry ( QtCore.QRect ( 380 , 470 , 171 , 41 ) )
        sizePolicy = QtWidgets.QSizePolicy ( QtWidgets.QSizePolicy.Expanding , QtWidgets.QSizePolicy.Fixed )
        sizePolicy.setHorizontalStretch ( 1 )
        sizePolicy.setVerticalStretch ( 0 )
        sizePolicy.setHeightForWidth ( self.lineEdit_11.sizePolicy ().hasHeightForWidth () )
        self.lineEdit_11.setSizePolicy ( sizePolicy )
        font = QtGui.QFont ()
        font.setPointSize ( 10 )
        self.lineEdit_11.setFont ( font )
        self.lineEdit_11.setAutoFillBackground ( False )
        self.lineEdit_11.setText ( "" )
        self.lineEdit_11.setFrame ( True )
        self.lineEdit_11.setClearButtonEnabled ( True )
        self.lineEdit_11.setObjectName ( "lineEdit_11" )
        self.radioButton = QtWidgets.QRadioButton ( self.centralwidget )
        self.radioButton.setGeometry ( QtCore.QRect ( 210 , 20 , 95 , 20 ) )
        self.radioButton.setObjectName ( "radioButton" )
        self.radioButton_2 = QtWidgets.QRadioButton ( self.centralwidget )
        self.radioButton_2.setEnabled ( True )
        self.radioButton_2.setGeometry ( QtCore.QRect ( 300 , 20 , 95 , 20 ) )
        self.radioButton_2.setChecked ( True )
        self.radioButton_2.setObjectName ( "radioButton_2" )
        self.doubleSpinBox = QtWidgets.QDoubleSpinBox ( self.centralwidget )
        self.doubleSpinBox.setGeometry ( QtCore.QRect ( 470 , 20 , 51 , 21 ) )
        font = QtGui.QFont ()
        font.setPointSize ( 10 )
        self.doubleSpinBox.setFont ( font )
        self.doubleSpinBox.setDecimals ( 1 )
        self.doubleSpinBox.setMinimum ( 0.0 )
        self.doubleSpinBox.setMaximum ( 5.0 )
        self.doubleSpinBox.setSingleStep ( 0.1 )
        self.doubleSpinBox.setProperty ( "value" , 0.5 )
        self.doubleSpinBox.setObjectName ( "doubleSpinBox" )
        self.label_3 = QtWidgets.QLabel ( self.centralwidget )
        self.label_3.setGeometry ( QtCore.QRect ( 410 , 10 , 51 , 31 ) )
        font = QtGui.QFont ()
        font.setPointSize ( 12 )
        font.setUnderline ( False )
        self.label_3.setFont ( font )
        self.label_3.setObjectName ( "label_3" )
        MainWindow.setCentralWidget ( self.centralwidget )
        self.statusbar = QtWidgets.QStatusBar ( MainWindow )
        self.statusbar.setObjectName ( "statusbar" )
        MainWindow.setStatusBar ( self.statusbar )

        self.retranslateUi ( MainWindow )
        QtCore.QMetaObject.connectSlotsByName ( MainWindow )

        self.pushButton.clicked.connect ( self.pressStart )
        self.pushButton_2.clicked.connect ( self.pressStop )

    def pressStop(self):

        stopFeed ()

    def pressStart(self):
        # retriving labels
        label = 'Right'
        if (self.radioButton_2.isChecked ()):
            label = 'Right'
        elif (self.radioButton.isChecked ()):
            label = 'Left'
        str1 = ""
        lst = []

        mapping = {}

        # print(self.centralwidget.findChild ( QLineEdit, "lineEdit_1" ).text()).
        for num in range ( 1 , 5 ):
            str1 = "comboBox_" + str ( num )
            str2 = "lineEdit_" + str ( num )
            if self.centralwidget.findChild ( QComboBox , str1 ).currentText () != "None":
                if self.centralwidget.findChild ( QLineEdit , str2 ).text () != '':
                    ges = self.centralwidget.findChild ( QComboBox , str1 ).currentText ().split ( ',' )[0]
                    lst.append ( ges )
                    mapping[ges] = [self.centralwidget.findChild ( QLineEdit , str2 ).text ()]
        for num in range ( 5 , 13 , 2 ):
            str1 = "comboBox_" + str ( num )
            str3 = "comboBox_" + str ( num + 1 )
            str2 = "lineEdit_" + str ( num )
            if self.centralwidget.findChild ( QComboBox ,
                                              str1 ).currentText () != "None" and self.centralwidget.findChild (
                    QComboBox , str3 ).currentText () != "None":
                if self.centralwidget.findChild ( QLineEdit , str2 ).text () != '':
                    ges = self.centralwidget.findChild ( QComboBox , str1 ).currentText ().split ( ',' )[0]
                    lst.append ( ges )
                    mapping[ges] = [self.centralwidget.findChild ( QComboBox , str3 ).currentText () ,
                                            self.centralwidget.findChild ( QLineEdit , str2 ).text ()]
        print ( lst , mapping , self.doubleSpinBox.value () )
        delay =self.doubleSpinBox.value ()
        takeFeed(lst, mapping,label,delay)

    def retranslateUi(self , MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle ( _translate ( "MainWindow" , "MainWindow" ) )
        self.pushButton.setText ( _translate ( "MainWindow" , "START" ) )
        self.pushButton_2.setText ( _translate ( "MainWindow" , "STOP" ) )
        self.comboBox_1.setItemText ( 0 , _translate ( "MainWindow" , "None" ) )
        self.comboBox_1.setItemText ( 1 , _translate ( "MainWindow" , "1,☝️" ) )
        self.comboBox_1.setItemText ( 2 , _translate ( "MainWindow" , "2," ) )
        self.comboBox_1.setItemText ( 3 , _translate ( "MainWindow" , "3,👆" ) )
        self.comboBox_1.setItemText ( 4 , _translate ( "MainWindow" , "4" ) )
        self.comboBox_1.setItemText ( 5 , _translate ( "MainWindow" , "5,✋" ) )
        self.comboBox_1.setItemText ( 6 , _translate ( "MainWindow" , "Thumb Right" ) )
        self.comboBox_1.setItemText ( 7 , _translate ( "MainWindow" , "Thumb Left" ) )
        self.comboBox_1.setItemText ( 8 , _translate ( "MainWindow" , "Fist,✊" ) )
        self.comboBox_1.setItemText ( 9 , _translate ( "MainWindow" , "Victory,✌️" ) )
        self.comboBox_1.setItemText ( 10 , _translate ( "MainWindow" , "Rock on,🤘" ) )
        self.lineEdit_1.setPlaceholderText ( _translate ( "MainWindow" , "Enter Key to Press" ) )
        self.label.setText ( _translate ( "MainWindow" , "Select Static Gesture" ) )
        self.comboBox_2.setItemText ( 0 , _translate ( "MainWindow" , "None" ) )
        self.comboBox_2.setItemText ( 1 , _translate ( "MainWindow" , "1,☝️" ) )
        self.comboBox_2.setItemText ( 2 , _translate ( "MainWindow" , "2," ) )
        self.comboBox_2.setItemText ( 3 , _translate ( "MainWindow" , "3,👆" ) )
        self.comboBox_2.setItemText ( 4 , _translate ( "MainWindow" , "4" ) )
        self.comboBox_2.setItemText ( 5 , _translate ( "MainWindow" , "5,✋" ) )
        self.comboBox_2.setItemText ( 6 , _translate ( "MainWindow" , "Thumb Right" ) )
        self.comboBox_2.setItemText ( 7 , _translate ( "MainWindow" , "Thumb Left" ) )
        self.comboBox_2.setItemText ( 8 , _translate ( "MainWindow" , "Fist,✊" ) )
        self.comboBox_2.setItemText ( 9 , _translate ( "MainWindow" , "Victory,✌️" ) )
        self.comboBox_2.setItemText ( 10 , _translate ( "MainWindow" , "Rock on,🤘" ) )
        self.lineEdit_2.setPlaceholderText ( _translate ( "MainWindow" , "Enter Key to Press" ) )
        self.comboBox_3.setItemText ( 0 , _translate ( "MainWindow" , "None" ) )
        self.comboBox_3.setItemText ( 1 , _translate ( "MainWindow" , "1,☝️" ) )
        self.comboBox_3.setItemText ( 2 , _translate ( "MainWindow" , "2," ) )
        self.comboBox_3.setItemText ( 3 , _translate ( "MainWindow" , "3,👆" ) )
        self.comboBox_3.setItemText ( 4 , _translate ( "MainWindow" , "4" ) )
        self.comboBox_3.setItemText ( 5 , _translate ( "MainWindow" , "5,✋" ) )
        self.comboBox_3.setItemText ( 6 , _translate ( "MainWindow" , "Fist,✊" ) )
        self.comboBox_3.setItemText ( 7 , _translate ( "MainWindow" , "Victory,✌️" ) )
        self.comboBox_3.setItemText ( 8 , _translate ( "MainWindow" , "Rock on,🤘" ) )
        self.lineEdit_3.setPlaceholderText ( _translate ( "MainWindow" , "Enter Key to Press" ) )
        self.comboBox_4.setItemText ( 0 , _translate ( "MainWindow" , "None" ) )
        self.comboBox_4.setItemText ( 1 , _translate ( "MainWindow" , "1,☝️" ) )
        self.comboBox_4.setItemText ( 2 , _translate ( "MainWindow" , "2," ) )
        self.comboBox_4.setItemText ( 3 , _translate ( "MainWindow" , "3,👆" ) )
        self.comboBox_4.setItemText ( 4 , _translate ( "MainWindow" , "4" ) )
        self.comboBox_4.setItemText ( 5 , _translate ( "MainWindow" , "5,✋" ) )
        self.comboBox_4.setItemText ( 6 , _translate ( "MainWindow" , "Fist,✊" ) )
        self.comboBox_4.setItemText ( 7 , _translate ( "MainWindow" , "Victory,✌️" ) )
        self.comboBox_4.setItemText ( 8 , _translate ( "MainWindow" , "Rock on,🤘" ) )
        self.lineEdit_4.setPlaceholderText ( _translate ( "MainWindow" , "Enter Key to Press" ) )
        self.comboBox_5.setItemText ( 0 , _translate ( "MainWindow" , "None" ) )
        self.comboBox_5.setItemText ( 1 , _translate ( "MainWindow" , "1,☝️" ) )
        self.comboBox_5.setItemText ( 2 , _translate ( "MainWindow" , "2," ) )
        self.comboBox_5.setItemText ( 3 , _translate ( "MainWindow" , "3,👆" ) )
        self.comboBox_5.setItemText ( 4 , _translate ( "MainWindow" , "4" ) )
        self.comboBox_5.setItemText ( 5 , _translate ( "MainWindow" , "5,✋" ) )
        self.comboBox_5.setItemText ( 6 , _translate ( "MainWindow" , "Fist,✊" ) )
        self.comboBox_5.setItemText ( 7 , _translate ( "MainWindow" , "Victory,✌️" ) )
        self.comboBox_5.setItemText ( 8 , _translate ( "MainWindow" , "Rock on,🤘" ) )
        self.lineEdit_5.setPlaceholderText ( _translate ( "MainWindow" , "Enter Key to Press" ) )
        self.label_2.setText ( _translate ( "MainWindow" , "Select Gesture with Dynamic Movement" ) )
        self.comboBox_6.setItemText ( 0 , _translate ( "MainWindow" , "None" ) )
        self.comboBox_6.setItemText ( 1 , _translate ( "MainWindow" , "Slide Left" ) )
        self.comboBox_6.setItemText ( 2 , _translate ( "MainWindow" , "Slide Right" ) )
        self.comboBox_6.setItemText ( 3 , _translate ( "MainWindow" , "Slide Up" ) )
        self.comboBox_6.setItemText ( 4 , _translate ( "MainWindow" , "Slide Down" ) )
        self.lineEdit_7.setPlaceholderText ( _translate ( "MainWindow" , "Enter Key to Press" ) )
        self.comboBox_10.setItemText ( 0 , _translate ( "MainWindow" , "None" ) )
        self.comboBox_10.setItemText ( 1 , _translate ( "MainWindow" , "Slide Left" ) )
        self.comboBox_10.setItemText ( 2 , _translate ( "MainWindow" , "Slide Right" ) )
        self.comboBox_10.setItemText ( 3 , _translate ( "MainWindow" , "Slide Up" ) )
        self.comboBox_10.setItemText ( 4 , _translate ( "MainWindow" , "Slide Down" ) )
        self.comboBox_9.setItemText ( 0 , _translate ( "MainWindow" , "None" ) )
        self.comboBox_9.setItemText ( 1 , _translate ( "MainWindow" , "1,☝️" ) )
        self.comboBox_9.setItemText ( 2 , _translate ( "MainWindow" , "2," ) )
        self.comboBox_9.setItemText ( 3 , _translate ( "MainWindow" , "3,👆" ) )
        self.comboBox_9.setItemText ( 4 , _translate ( "MainWindow" , "4" ) )
        self.comboBox_9.setItemText ( 5 , _translate ( "MainWindow" , "5,✋" ) )
        self.comboBox_9.setItemText ( 6 , _translate ( "MainWindow" , "Fist,✊" ) )
        self.comboBox_9.setItemText ( 7 , _translate ( "MainWindow" , "Victory,✌️" ) )
        self.comboBox_9.setItemText ( 8 , _translate ( "MainWindow" , "Rock on,🤘" ) )
        self.comboBox_7.setItemText ( 0 , _translate ( "MainWindow" , "None" ) )
        self.comboBox_7.setItemText ( 1 , _translate ( "MainWindow" , "1,☝️" ) )
        self.comboBox_7.setItemText ( 2 , _translate ( "MainWindow" , "2," ) )
        self.comboBox_7.setItemText ( 3 , _translate ( "MainWindow" , "3,👆" ) )
        self.comboBox_7.setItemText ( 4 , _translate ( "MainWindow" , "4" ) )
        self.comboBox_7.setItemText ( 5 , _translate ( "MainWindow" , "5,✋" ) )
        self.comboBox_7.setItemText ( 6 , _translate ( "MainWindow" , "Fist,✊" ) )
        self.comboBox_7.setItemText ( 7 , _translate ( "MainWindow" , "Victory,✌️" ) )
        self.comboBox_7.setItemText ( 8 , _translate ( "MainWindow" , "Rock on,🤘" ) )
        self.comboBox_8.setItemText ( 0 , _translate ( "MainWindow" , "None" ) )
        self.comboBox_8.setItemText ( 1 , _translate ( "MainWindow" , "Slide Left" ) )
        self.comboBox_8.setItemText ( 2 , _translate ( "MainWindow" , "Slide Right" ) )
        self.comboBox_8.setItemText ( 3 , _translate ( "MainWindow" , "Slide Up" ) )
        self.comboBox_8.setItemText ( 4 , _translate ( "MainWindow" , "Slide Down" ) )
        self.comboBox_12.setItemText ( 0 , _translate ( "MainWindow" , "None" ) )
        self.comboBox_12.setItemText ( 1 , _translate ( "MainWindow" , "Slide Left" ) )
        self.comboBox_12.setItemText ( 2 , _translate ( "MainWindow" , "Slide Right" ) )
        self.comboBox_12.setItemText ( 3 , _translate ( "MainWindow" , "Slide Up" ) )
        self.comboBox_12.setItemText ( 4 , _translate ( "MainWindow" , "Slide Down" ) )
        self.comboBox_11.setItemText ( 0 , _translate ( "MainWindow" , "None" ) )
        self.comboBox_11.setItemText ( 1 , _translate ( "MainWindow" , "1,☝️" ) )
        self.comboBox_11.setItemText ( 2 , _translate ( "MainWindow" , "2," ) )
        self.comboBox_11.setItemText ( 3 , _translate ( "MainWindow" , "3,👆" ) )
        self.comboBox_11.setItemText ( 4 , _translate ( "MainWindow" , "4" ) )
        self.comboBox_11.setItemText ( 5 , _translate ( "MainWindow" , "5,✋" ) )
        self.comboBox_11.setItemText ( 6 , _translate ( "MainWindow" , "Fist,✊" ) )
        self.comboBox_11.setItemText ( 7 , _translate ( "MainWindow" , "Victory,✌️" ) )
        self.comboBox_11.setItemText ( 8 , _translate ( "MainWindow" , "Rock on,🤘" ) )
        self.lineEdit_9.setPlaceholderText ( _translate ( "MainWindow" , "Enter Key to Press" ) )
        self.lineEdit_11.setPlaceholderText ( _translate ( "MainWindow" , "Enter Key to Press" ) )
        self.radioButton.setText ( _translate ( "MainWindow" , "Left Hand" ) )
        self.radioButton_2.setText ( _translate ( "MainWindow" , "Right Hand" ) )
        self.label_3.setText ( _translate ( "MainWindow" , "Delay" ) )


if __name__ == "__main__":
    import sys
    import cv2
    from time import sleep
    import mediapipe as mp
    import keyboard
    # import pyautogui

    # pyautogui.FAILSAFE = False

    app = QtWidgets.QApplication ( sys.argv )
    MainWindow = QtWidgets.QMainWindow ()
    ui = Ui_MainWindow ()
    ui.setupUi ( MainWindow )
    MainWindow.show ()

    mp_drawing = mp.solutions.drawing_utils
    mp_hands = mp.solutions.hands
    img_height = 480
    img_width = 640

    select_ges = []
    ges_key = {}
    global structuredLandmarks
    global cap
    global prev
    prev = None


    # Overlay for camera
    def __draw_label(img , text , pos , bg_color):
        font_face = cv2.FONT_HERSHEY_SIMPLEX
        scale = 0.9
        color = (0 , 0 , 0)
        thickness = cv2.FILLED
        margin = 2

        txt_size = cv2.getTextSize ( text , font_face , scale , thickness )

        end_x = pos[0] + txt_size[0][0] + margin
        end_y = pos[1] - txt_size[0][1] - margin

        cv2.rectangle ( img , pos , (end_x , end_y) , bg_color , thickness )
        cv2.putText ( img , text , pos , font_face , scale , color , 1 , cv2.LINE_AA )


    def recognizeHandGesture(landmarks , label):
        global select_ges

        thumbState = 'UNKNOW'

        indexFingerState = 'UNKNOW'
        middleFingerState = 'UNKNOW'
        ringFingerState = 'UNKNOW'
        littleFingerState = 'UNKNOW'
        thumbRight = False
        thumbLeft = False
        recognizedHandGesture = None
        if (landmarks[4]['y'] < landmarks[3]['y'] < landmarks[5]['y'] < landmarks[9]['y'] < landmarks[13]['y'] <
                landmarks[17]['y'] and landmarks[6]['x'] < landmarks[7]['x']):
            print ( 'Thumbs Up' )

        elif (landmarks[4]['y'] > landmarks[3]['y'] > landmarks[5]['y'] > landmarks[9]['y'] > landmarks[13]['y'] >
              landmarks[17]['y'] and landmarks[6]['x'] < landmarks[7]['x']):
            print ( 'Thumbs down' )

        if label.strip () == 'Left':
            print ( 'left' )
            pseudoFixKeyPoint = landmarks[2]['x']

            if pseudoFixKeyPoint < landmarks[3]['x'] < landmarks[4]['x']:
                thumbState = 'OPEN'
            elif pseudoFixKeyPoint > landmarks[3]['x'] > landmarks[4]['x']:
                thumbState = 'CLOSE'

        else:

            pseudoFixKeyPoint = landmarks[2]['x']

            if pseudoFixKeyPoint < landmarks[3]['x'] < landmarks[4]['x']:
                thumbState = 'CLOSE'
            elif pseudoFixKeyPoint > landmarks[3]['x'] > landmarks[4]['x']:
                thumbState = 'OPEN'

        if (pseudoFixKeyPoint < landmarks[3]['x'] < landmarks[4]['x'] and landmarks[4]['x'] >
                landmarks[17]['x']):
            thumbRight = True
        elif (pseudoFixKeyPoint > landmarks[3]['x'] > landmarks[4]['x'] and landmarks[4]['x'] <
              landmarks[17]['x']):
            thumbLeft = True

        pseudoFixKeyPoint = landmarks[6]['y']
        if pseudoFixKeyPoint > landmarks[7]['y'] > landmarks[8]['y']:
            indexFingerState = 'OPEN'
        elif pseudoFixKeyPoint < landmarks[7]['y'] < landmarks[8]['y']:
            indexFingerState = 'CLOSE'

        pseudoFixKeyPoint = landmarks[10]['y']
        if pseudoFixKeyPoint > landmarks[11]['y'] > landmarks[12]['y']:
            middleFingerState = 'OPEN'
        elif pseudoFixKeyPoint < landmarks[11]['y'] < landmarks[12]['y']:
            middleFingerState = 'CLOSE'

        pseudoFixKeyPoint = landmarks[14]['y']
        if pseudoFixKeyPoint > landmarks[15]['y'] > landmarks[16]['y']:
            ringFingerState = 'OPEN'
        elif pseudoFixKeyPoint < landmarks[15]['y'] < landmarks[16]['y']:
            ringFingerState = 'CLOSE'

        pseudoFixKeyPoint = landmarks[18]['y']
        if pseudoFixKeyPoint > landmarks[19]['y'] > landmarks[20]['y']:
            littleFingerState = 'OPEN'
        elif pseudoFixKeyPoint < landmarks[19]['y'] < landmarks[20]['y']:
            littleFingerState = 'CLOSE'

        if thumbState == 'OPEN' and indexFingerState == 'OPEN' and middleFingerState == 'OPEN' and ringFingerState == 'OPEN' and littleFingerState == 'OPEN' and '5' in select_ges:
            recognizedHandGesture = 5  # "FIVE"
            pressKey ( ges_key['5'] )

        elif thumbState == 'CLOSE' and indexFingerState == 'OPEN' \
                and middleFingerState == 'OPEN' and ringFingerState == 'OPEN' \
                and littleFingerState == 'OPEN' and '4' in select_ges:
            pressKey ( ges_key['4'] )

            # scrolling(landmarks[0]['x']*img_width,landmarks[0]['y']*img_height)
            #     slide(landmarks[0]['x']*img_width,landmarks[0]['y']*img_height,landmarks[9]['x']*img_width,landmarks[9]['y']*img_height)
            #     keyboard.press_and_release('Page Down')

            recognizedHandGesture = 4  # "FOUR"
        elif thumbState == 'CLOSE' and indexFingerState == 'OPEN' \
                and middleFingerState == 'OPEN' and ringFingerState == 'OPEN' \
                and littleFingerState == 'CLOSE' and '3' in select_ges:
            pressKey ( ges_key['3'] )

            recognizedHandGesture = 3  # "THREE"

        elif thumbState == 'OPEN' and indexFingerState == 'OPEN' \
                and middleFingerState == 'CLOSE' and ringFingerState == 'CLOSE' \
                and littleFingerState == 'CLOSE' and '2' in select_ges:

            pressKey ( ges_key['2'] )
            recognizedHandGesture = 2  # "TWO"

        elif thumbState == 'CLOSE' and indexFingerState == 'CLOSE' \
                and middleFingerState == 'CLOSE' and ringFingerState == 'CLOSE' \
                and littleFingerState == 'CLOSE' and 'Fist' in select_ges:
            pressKey ( ges_key['Fist'] )
            recognizedHandGesture = 'Fist'  # "FIST"

        elif thumbState == 'CLOSE' and indexFingerState == 'OPEN' \
                and middleFingerState == 'OPEN' and ringFingerState == 'CLOSE' \
                and littleFingerState == 'CLOSE' and 'Victory' in select_ges:
            pressKey ( ges_key['Victory'] )
            recognizedHandGesture = 'Victory'  # "Victory"

        elif (
                thumbState == 'OPEN' and thumbLeft and indexFingerState == 'CLOSE' and middleFingerState == 'CLOSE' and ringFingerState == 'CLOSE' and littleFingerState == 'CLOSE'):
            recognizedHandGesture = 'Thumb Left'
        elif (
                thumbState == 'OPEN' and thumbRight and indexFingerState == 'CLOSE' and middleFingerState == 'CLOSE' and ringFingerState == 'CLOSE' and littleFingerState == 'CLOSE'):
            recognizedHandGesture = 'Thumb Right'


        elif thumbState == 'CLOSE' and indexFingerState == 'OPEN' \
                and middleFingerState == 'CLOSE' and ringFingerState == 'CLOSE' \
                and littleFingerState == 'CLOSE' and '1' in select_ges:

            #     keyboard.press('Ctrl')
            pressKey ( ges_key['1'] )  # ONE
            recognizedHandGesture = 1  # "1"
        else:
            #     print(landmarks[8]['x'], landmarks[8]['y'])
            #     pyautogui.moveTo(landmarks[8]['x']*1080*2, landmarks[8]['y']*1920*2, duration = 0.1)
            recognizedHandGesture = 0  # "UNKNOW"

        print ( thumbState ,
                indexFingerState ,
                middleFingerState ,
                ringFingerState ,
                littleFingerState ,

                )

        return recognizedHandGesture

    def takeFeed(gesture_lst , mapping , label,delay):
        global cap , select_ges , ges_key
        ges_key = mapping.copy ()
        select_ges = gesture_lst.copy ()
        print ( select_ges , gesture_lst )
        hands = mp_hands.Hands ( min_detection_confidence=0.6 , max_num_hands=1 ,
                                 min_tracking_confidence=0.5 )
        cap = cv2.VideoCapture ( 0 )
        while cap.isOpened ():
            sleep ( delay )
            (success , image) = cap.read ()
            if not success:
                break
            #print(image.size())

            # Flip the image horizontally for a later selfie-view display, and convert
            # the BGR image to RGB.

            image = cv2.cvtColor ( cv2.flip ( image , 1 ) , cv2.COLOR_BGR2RGB )

            # To improve performance, optionally mark the image as not writeable to
            # pass by reference.

            image.flags.writeable = False
            results = hands.process ( image )

            # Draw the hand annotations on the image.

            image.flags.writeable = True
            image = cv2.cvtColor ( image , cv2.COLOR_RGB2BGR )

            if results.multi_hand_landmarks:
                for hand_landmarks in results.multi_hand_landmarks:
                    mp_drawing.draw_landmarks ( image , hand_landmarks ,
                                                mp_hands.HAND_CONNECTIONS )
                landmark_data = []
                for point in hand_landmarks.landmark:
                    landmark_data.append ( point.x )
                    landmark_data.append ( point.y )
                recognizedHandGesture = recognizeHandGesture ( getStructuredLandmarks ( landmark_data ) , label )

                #     print(landmark_data[0]*img_width,landmark_data[1]*img_height)

                print ( 'recognized hand gesture: ' , recognizedHandGesture )
            # global msg
            # __draw_label(image, msg, (20, 20), (0xFF, 0, 0))
            cv2.imshow ( 'MediaPipe Hands' , image )
            keypress = cv2.waitKey ( 1 ) & 0xFF
            if keypress == ord ( 'q' ):
                break


    def pressKey(key):
        if len ( key )==1:
            print("Static")
            keyboard.press_and_release ( key[0] )
        else:
            print('Dynamic')

            sliding ( structuredLandmarks[0]['x'] *img_width, structuredLandmarks[0]['y']*img_height ,key[0] , key[1] )




    def press(key):

        global prev
        print ( prev , key )
        if prev == None:
            keyboard.press ( key )
        elif (prev == 'down' or prev == 'up') and (key == 'left' or key == 'right'):
            keyboard.press ( key )
        else:
            keyboard.release ( prev )
            keyboard.press ( key )

    previous_x_center = 0
    previous_y_center = 0
    msg = 'HELLOO'
    previous_angle = 0

    def sliding(x_center , y_center , ges,key):
        global previous_x_center
        global previous_y_center
        global msg , prev
        if previous_x_center != 0:
            movementDistance = get_Euclidean_DistanceAB ( x_center , y_center , previous_x_center ,
                                                           previous_y_center )

            movementDistanceFactor = 0.04

            movementDistanceThreshold = movementDistanceFactor * img_height
            print ( movementDistance , movementDistanceThreshold )

            print(movementDistance > movementDistanceThreshold)
            if movementDistance > movementDistanceThreshold:

                angle = radianToDegree ( getAngleABC ( x_center , y_center , previous_x_center , previous_y_center ,
                                                       previous_x_center + 0.1 , previous_y_center ) )
                print ( ges,key )
                if angle >= -45 and angle < 45 and ges == 'Slide Right':
                    msg = 'Right'
                    keyboard.press_and_release ( key )
                    prev = 'right'
                    print ( "Scrolling right" )

                elif angle >= 45 and angle < 135 and ges == 'Slide Up':
                    msg = 'Up'
                    keyboard.press_and_release ( key )
                    press ( 'up' )
                    prev = 'up'

                    print ( "Scrolling up" )

                elif angle >= 135 or angle < -135 and ges == 'Slide Left':
                    msg = 'left'
                    keyboard.press_and_release ( key )
                    print ( "Scrolling left" )
                    press ( 'left' )
                    prev = 'left'

                elif angle >= -135 and angle < -45 and ges == 'Slide Down':
                    msg = 'down'
                    keyboard.press_and_release ( key )
                    press ( 'down' )
                    prev = 'down'
                    print ( "Scrolling down" )

        previous_x_center = x_center
        previous_y_center = y_center


    def getStructuredLandmarks(landmarks):
        global structuredLandmarks
        structuredLandmarks = []
        for j in range ( 42 ):
            if (j % 2 == 1):
                structuredLandmarks.append ( {'x': landmarks[j - 1] , 'y': landmarks[j]} )
        return structuredLandmarks


    def get_Euclidean_DistanceAB(a_x , a_y , b_x , b_y):
        dist = math.pow ( a_x - b_x , 2 ) + math.pow ( a_y - b_y , 2 );
        return math.sqrt ( dist );


    def isThumbNearFirstFinger(point1,point2):

        distance = get_Euclidean_DistanceAB(point1.x(), point1.y(), point2.x(), point2.y());
        return distance < 0.1;


    def getAngleABC(a_x , a_y , b_x , b_y , c_x , c_y):
        ab_x = b_x - a_x;
        ab_y = b_y - a_y;
        cb_x = b_x - c_x;
        cb_y = b_y - c_y;

        dot = (ab_x * cb_x + ab_y * cb_y)
        cross = (ab_x * cb_y - ab_y * cb_x)

        alpha = math.atan2 ( cross , dot );

        return alpha;


    def radianToDegree(radian):
        return math.floor ( radian * 180. / 3.141 + 0.5 );


    def stopFeed():
        global cap
        cap.release ()
        cv2.destroyAllWindows ()


    sys.exit ( app.exec_ () )